[tox]
envlist = py3,help,version,ruff,type,cov
isolated_build = true

[tox:.package]
basepython = python3

[testenv]
setenv = 
	package = maflib
	PYTHONHASHSEED = 0
passenv = PIP_EXTRA_INDEX_URL
skip_install =
	false
install_command = python -m pip install {opts} {packages}
extras = test
commands = pytest -vv {posargs}

[testenv:dev]
basepython = python3.8
extras =
    dev
	test

[testenv:requirements]
deps = pip-tools
skip_install =
	true
commands =
  pip-compile -o requirements.txt pyproject.toml

[testenv:help]
skip_install =
	false
deps = 
commands =
	python -m {env:package} --help

[testenv:cov]
deps = 
extras = test
commands =
	coverage run -m pytest tests/
	coverage combine
	coverage report -m
	coverage xml
	coverage xml -o test-reports/results.xml

[testenv:ruff]
skip_install=True
deps = 
    ruff
commands = 
	ruff {env:package}/ tests/

[testenv:type]
ignore_outcome=True
skip_install = false
deps=
    mypy
commands =
	python -m mypy {env:package}/

[testenv:build]
skip_install= true
isolated_build = false
install_command = python -m pip install {opts} {packages}
deps= 
  flit
  setuptools_scm
commands = 
  python -m setuptools_scm
  python -m flit build

[testenv:publish]
isolated_build=False
skip_install=true
passenv =
	TWINE_USERNAME
	TWINE_PASSWORD
	TWINE_REPOSITORY_URL
install_command = python -m pip install {opts} {packages}
deps= 
    setuptools_scm
    flit
    twine
commands = 
    python -m setuptools_scm
    python -m flit build
    twine check dist/*
    twine upload dist/*

[testenv:version]
skip_install=True
allowlist_externals =
  git
deps =
commands = 
  git describe --tags --always

[testenv:cruft]
skip_install=True
deps = cruft
allowlist_externals =
  git
commands = 
  cruft check
